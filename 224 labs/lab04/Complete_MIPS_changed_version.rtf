{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\colortbl ;\red255\green255\blue0;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\f0\fs22\lang1033\par
// Written by David_Harris@hmc.edu\par
\par
// Top level system including MIPS and memories\par
\par
\par
module top  (input   logic \tab  clk, reset,            \par
\tab      output  logic[31:0] writedata, dataadr,            \par
\tab      output  logic       memwrite);  \par
\par
   logic [31:0] pc, instr, readdata;    \par
\par
   // instantiate processor and memories  \par
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  \par
   imem imem (pc[7:2], instr);  \par
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);\par
\par
endmodule\par
\par
\par
\par
// External data memory used by MIPS single-cycle processor\par
\par
module dmem (input  logic        clk, we,\par
             input  logic[31:0]  a, wd,\par
             output logic[31:0]  rd);\par
\par
   logic  [31:0] RAM[63:0];\par
  \par
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)\par
\par
   always_ff @(posedge clk)\par
     if (we)\par
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)\par
\par
endmodule\par
\par
\par
\par
// External instruction memory used by MIPS single-cycle\par
// processor. It models instruction memory as a stored-program \par
// ROM, with address as input, and instruction as output\par
\par
\par
module imem ( input logic [5:0] addr, output logic [31:0] instr); \par
\par
// imem is modeled as a lookup table, a stored-program byte-addressable ROM \par
\par
always_comb \par
\par
   case (\{addr,2'b00\})\tab\tab    \tab // word-aligned fetch \par
\par
//\tab\tab address\tab\tab instruction \par
\par
//\tab\tab -------\tab\tab ----------- \par
\par
8'h00: instr = 32'h20020005;  \tab // disassemble, by hand  \par
8'h04: instr = 32'h2003000c;  \tab // or with a program, \par
8'h08: instr = 32'h2067fff7;  \tab // to find out what \par
8'h0c: instr = 32'h00e22025;  \tab // this program does! \par
8'h10: instr = 32'h00642824; \par
8'h14: instr = 32'h00a42820; \par
8'h18: instr = 32'h10a7000a; \par
8'h1c: instr = 32'h0064202a; \par
8'h20: instr = 32'h10800001; \par
8'h24: instr = 32'h20050000; \par
8'h28: instr = 32'h00e2202a; \par
8'h2c: instr = 32'h00853820; \par
8'h30: instr = 32'h00e23822; \par
8'h34: instr = 32'hac670044; \par
8'h38: instr = 32'h8c020050; \par
8'h3c: instr = 32'h08000011; \par
8'h40: instr = 32'h20020001; \par
8'h44: instr = 32'hac020054; \par
8'h48: instr = 32'h08000012;\tab // j 48, so it will loop here \par
8'h4c: instr = 32'h6ba70000; // push a3 \par
8'h50: instr = 32'h0e4d0028; // jalm t5, 40(s3) \par
\par
     default:  instr = \{32\{1'bx\}\};\tab // unknown address \par
\par
   endcase \par
\par
endmodule \par
\par
// single-cycle MIPS processor, with controller and datapath\par
\par
module mips (input  logic        clk, reset, \par
             output logic[31:0]  pc, \par
             input  logic[31:0]  instr, \par
             output logic        memwrite, \par
             output logic[31:0]  aluout, writedata, \par
             input  logic[31:0]  readdata); \par
\par
  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump, jalm, push; \par
\par
  logic [2:0]  alucontrol; \par
\par
\par
  controller c (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc, \par
\par
                        alusrc, regdst, regwrite, jump, jalm, push, alucontrol); \par
\par
\par
  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump, jalm, push, alucontrol, zero, pc, instr, aluout, writedata, readdata); \par
\par
endmodule \par
\par
\par
module controller(input  logic[5:0] op, funct, \par
                  input  logic     zero, \par
                  output logic     memtoreg, memwrite, \par
                  output logic     pcsrc, alusrc, \par
                  output logic     regdst, regwrite, \par
                  output logic     jump, \par
\tab\tab\tab   output logic     jalm,push, \par
\par
                  output logic[2:0] alucontrol); \par
\par
   logic [1:0] aluop; \par
   logic       branch; \par
\par
\par
   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, jump, jalm, push, aluop); \par
\par
 \par
   aludec  ad (funct, aluop, alucontrol); \par
   assign pcsrc = branch & zero; \par
\par
endmodule \par
\par
\par
module maindec (input logic[5:0] op,  \par
\par
              output logic memtoreg, memwrite, branch, \par
\par
              output logic alusrc, regdst, regwrite, jump, \par
\par
\tab\tab    output logic jalm,push, \par
\par
              output logic[1:0] aluop ); \par
\par
   logic [10:0] controls; \par
\par
   assign \{regwrite, regdst, alusrc, branch, memwrite, \par
\par
   \tab\tab memtoreg,  aluop, jump, jalm, push\} = controls; \par
\par
  always_comb \par
\par
    case(op) \par
\par
      6'b000000: controls <= 11'b11000010000; // R-type \par
      6'b100011: controls <= 11'b10100100000; // LW \par
      6'b101011: controls <= 11'b00101000000; // SW \par
      6'b000100: controls <= 11'b00010001000; // BEQ \par
      6'b001000: controls <= 11'b10100000000; // ADDI \par
      6'b000010: controls <= 11'b00000000100; // J \par
      6'b000011: controls <= 11'b10100100010; // jalm \par
      6'b011010: controls <= 11'b1xx01001001; // push \par
      default:   controls <= 11'bxxxxxxxxxxx; // illegal op \par
\par
    endcase \par
\par
endmodule\par
\par
\par
module aludec (input    logic[5:0] funct,\par
               input    logic[1:0] aluop,\par
               output   logic[2:0] alucontrol);\par
  always_comb\par
    case(aluop)\par
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)\par
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)\par
      default: case(funct)          // R-TYPE instructions\par
          6'b100000: alucontrol  = 3'b010; // ADD\par
          6'b100010: alucontrol  = 3'b110; // SUB\par
          6'b100100: alucontrol  = 3'b000; // AND\par
          6'b100101: alucontrol  = 3'b001; // OR\par
          6'b101010: alucontrol  = 3'b111; // SLT\par
          default:   alucontrol  = 3'bxxx; // ???\par
        endcase\par
    endcase\par
endmodule\par
\par
module datapath (input  logic clk, reset, memtoreg, pcsrc, \tab\tab\tab\tab alusrc, regdst, \par
         \tab\tab input  logic regwrite, jump,  \par
\tab\tab\tab input  logic jalm, push, \par
\tab\tab\tab input  logic[2:0]  alucontrol,  \par
                output logic zero,  \par
\tab\tab\tab output logic[31:0] pc,  \par
        \tab\tab input  logic[31:0] instr, \par
                output logic[31:0] aluout, writedata,  \par
        \tab\tab input  logic[31:0] readdata); \par
\par
  logic [4:0]  writereg; \par
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch; \par
  logic [31:0] signimm, signimmsh, srca, srcb, result; \par
  logic [31:0] result2, srcb2,newA1,newA3; \par
\par
  // next PC logic \par
\par
  flopr #(32) pcreg(clk, reset, pcnext, pc); \par
  adder       pcadd1(pc, 32'b100, pcplus4); \par
  sl2         immsh(signimm, signimmsh); \par
  adder       pcadd2(pcplus4, signimmsh, pcbranch); \par
\par
 \par
\par
  mux2 #(32)  pcmux(pcnextbr, \{pcplus4[31:28],  \par
\par
              instr[25:0], 2'b00\}, jump, pcnext); \par
\par
  //jalm \par
\par
  logic[31:0] empty; \par
\par
  mux4 jalm4Mux(pcplus4,pcbranch,result,empty,\{jalm, pcsrc\},pcnextbr); \par
\par
  mux2 jalm2Mux(result, pcplus4,jalm,result2); \par
\par
// register file logic \par
\par
   regfile     rf (clk, regwrite, newA1, instr[20:16], writereg, \par
\par
                   result2, srca, writedata); \par
\par
   mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, newA3); \par
\par
   mux2 #(32)  resmux (aluout, readdata, memtoreg, result); \par
\par
   signext         se (instr[15:0], signimm); \par
\par
  // ALU logic \par
\par
   mux2 #(32)  srcbmux (writedata, signimm, alusrc, srcb); \par
\par
//push \par
\par
   mux2 \tab push4mux(srcb, 32'd4, push, srcb2); \par
   mux2 \tab pushA1mux(instr[25:21], 5'd29, push, newA1);    \par
   mux2 \tab pushA3mux(newA3, 5'd29, push, writereg); \par
\par
   alu         alu (srca, srcb2, alucontrol, aluout, zero); \par
\par
endmodule \par
\par
\par
\par
module regfile (input    logic clk, we3, \par
                input    logic[4:0]  ra1, ra2, wa3, \par
                input    logic[31:0] wd3, \par
                output   logic[31:0] rd1, rd2);\par
\par
  logic [31:0] rf [31:0];\par
\par
  // three ported register file: read two ports combinationally\par
  // write third port on rising edge of clock. Register0 hardwired to 0.\par
\par
  \highlight1 always_ff@(posedge clk)\highlight0\par
     if (we3) \par
         rf [wa3] <= wd3;\tab\par
\par
  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;\par
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;\par
\par
endmodule\par
\par
\par
module alu(input  logic [31:0] a, b,  \par
           input  logic [2:0]  alucont,  \par
           output logic [31:0] result, \par
           output logic zero); \par
\par
\tab always_comb \par
\par
\tab case ( alucont) \par
\par
\tab\tab 3'b000: result = a&b; \par
\par
\tab\tab 3'b001: result = a|b; \par
\par
\tab\tab 3'b010: result = a+b; \par
\par
\tab\tab 3'b110: result = a-b; \par
\par
\tab\tab 3'b111: result = (a<b) + 32'b0000; \par
\par
\tab\tab default: result = a+b; \par
\par

\pard\li720 endcase \par

\pard\par
  assign zero = 0; \par
\par
endmodule \par
\par
\par
module adder (input  logic[31:0] a, b,\par
              output logic[31:0] y);\par
     \par
     assign y = a + b;\par
endmodule\par
\par
module sl2 (input  logic[31:0] a,\par
            output logic[31:0] y);\par
     \par
     assign y = \{a[29:0], 2'b00\}; // shifts left by 2\par
endmodule\par
\par
module signext (input  logic[15:0] a,\par
                output logic[31:0] y);\par
              \par
  assign y = \{\{16\{a[15]\}\}, a\};    // sign-extends 16-bit a\par
endmodule\par
\par
// parameterized register\par
module flopr #(parameter WIDTH = 8)\par
              (input logic clk, reset, \par
\tab        input logic[WIDTH-1:0] d, \par
               output logic[WIDTH-1:0] q);\par
\par
  always_ff@(posedge clk, posedge reset)\par
    if (reset) q <= 0; \par
    else       q <= d;\par
endmodule\par
\par
\par
// paramaterized 2-to-1 MUX\par
module mux2 #(parameter WIDTH = 8)\par
             (input  logic[WIDTH-1:0] d0, d1,  \par
              input  logic s, \par
              output logic[WIDTH-1:0] y);\par
  \par
   assign y = s ? d1 : d0; \par
endmodule\par
\par
\par
module mux4(input logic[31:0] a, b, c, d, \par
\par
\tab\tab  input logic [1:0] s, \par
\par
\tab\tab  output logic out ); \par
\par
 \par
\par
    assign out = s[1]? (s[0]? c:d):(s[0] ? b : a); \par
\par
endmodule \par
\par
\par
}
 