.text

start:
	
	la 	$a0,start
	la 	$a1,end
	jal 	count
	
print:
	#Print I-type text
	li 	$v0,4
	la 	$a0,msg1
	syscall
	
	move	$a0,$s3
	li	$v0, 1		
	syscall	
	
	#Print R-type text
	li 	$v0,4
	la 	$a0,msg2
	syscall
	
	move	$a0,$s2
	li	$v0, 1		
	syscall	
	
	add	$t0,$t0,$t1
	addi	$t0,$t0,100
	#lw	$t4,0($t0)
	exit:
	li $v0,10
	syscall
end:	
	
count:
	
	# Save $s registers used
	addi	$sp, $sp, -36
	sw	$s7, 32($sp)
	sw	$s6, 28($sp)
	sw	$s5, 24($sp)
	sw	$s4, 20($sp)
	sw	$s3, 16($sp)
	sw	$s2, 12($sp)
	sw	$s1, 8($sp)
	sw	$s0, 4($sp)
	sw	$ra, 0($sp) 	

	move	$s0,$a0		#s0=start address
	li	$s2,0		#s2=R-type counter
	move 	$s1,$a1		#s1=end address
	li	$s3,0		#s3=I-type counter
	
	loop:
	lw	$s4,0($s0)
	
	srl	$s6, $s4,26
	
	beq	$s6, $0,Rtype
	beq	$s6, 2,Jtype
	beq	$s6, 3,Jtype
	addi	$s3,$s3,1
	
	
	continue:
	addi	$s0, $s0, 4
	beq	$s0, $s1, print
	j loop
	
Rtype:
	beq	$s0, $s1, print
	addi	$s2, $s2, 1
	j	continue

Jtype:
	beq	$s0, $s1, print	
	j	continue
	
	# Restore the register values
	lw	$ra, 0($sp)
	lw	$s0, 4($sp)
	lw	$s1, 8($sp)
	lw	$s2, 12($sp)
	lw	$s3, 16($sp)
	lw	$s4, 20($sp)
	lw	$s5, 24($sp)
	lw	$s6, 28($sp)
	lw	$s7, 32($sp)
	addi	$sp, $sp, 36
		
	
	jr	$ra



	.data
line:	.asciiz "\n--------------------------------------"
msg1: 	.asciiz "\nI type:"
msg2: 	.asciiz "\nR type:"

————————————————————————————————————




.text

start:

	#Print numerator text
	li 	$v0, 4
	la 	$a0, msg1
	syscall

	#Read numerator

	li 	$v0, 5
	syscall
	
	move 	$s0, $v0
	beq	$s0, $0, exit
	
	#Print denominator text
	li 	$v0, 4
	la 	$a0, msg2
	syscall

	#Read denominator

	li 	$v0, 5
	syscall
	
	move 	$s1, $v0
	beq	$s1, $0, exit 
	bgt 	$s1, $s0, fail
	
	jal recursivediv
	
	#Print resutl text
	li 	$v0, 4
	la 	$a0, msg3
	syscall
	move	$a0, $s2	
	li	$v0, 1		
	syscall	
	
	li 	$v0, 4
	la 	$a0, line
	syscall
	j start
	
	fail:
		#Print denominator text
		li 	$v0, 4
		la 	$a0, msg5
		syscall
		
	li 	$v0, 4
	la 	$a0, line
	syscall
	
	j start
	
	exit:
	li $v0, 10
	syscall
	

recursivediv:
	#s0=numerator
	#s1=denominator
	#s2=dcounter
	li 	$s2, 0			#initialize
	
	recursive:
	
	# Save $s registers used
	addi	$sp, $sp, -8
	sw	$s0, 4($sp)
	sw	$ra, 0($sp) 
	
	sub 	$s0, $s0, $s1		#subtraction
	addi	$s2, $s2, 1		#counter++
	blt 	$s0, $s1, divDone
	jal 	recursive
	
divDone:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s0, 4($sp)
	addi	$sp, $sp, 8

	jr	$ra		
	
	
	
	.data
line:	.asciiz "\n--------------------------------------"
msg1: 	.asciiz "\nEnter a numerator:"
msg2: 	.asciiz "\nEnter a denominator:"
msg3: 	.asciiz "\nQuotient:"
msg5: 	.asciiz "\n0 "




——————————————————————————————————————






.text

start:

	#Print input text
	li 	$v0, 4
	la 	$a0, msg2
	syscall

	#Read input

	li 	$v0, 5
	syscall

	sw 	$v0, size
	move	$a0, $v0
	jal	createLinkedList

	# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	sw 	$v0, array1
	

	lw 	$v0, array1
	move	$a0, $v0	# Pass the linked list address in $a0
	jal 	printLinkedList

	la	$a0, msg5
	li	$v0, 4
	syscall
	lw 	$v0, array1
	move	$a0, $v0
	jal 	printReverse


exit:
	li $v0, 10
	syscall

	#Generate a linked

createLinkedList:

	addi	$sp, $sp, -36
	sw	$s7, 32($sp)
	sw	$s6, 28($sp)
	sw	$s5, 24($sp)
	sw	$s4, 20($sp)
	sw	$s3, 16($sp)
	sw	$s2, 12($sp)
	sw	$s1, 8($sp)
	sw	$s0, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
	# Create the first node: header.

	# Each node is 8 bytes: link field then data field.

	li	$a0, 8
	li	$v0, 9
	syscall	

	# OK now we have the list head. Save list head pointer 

	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.

	#Print input text
	li 	$v0, 4
	la 	$a0, msg1
	syscall

	#Read input

	li 	$v0, 5
	syscall
	
	move	$s4, $v0
	sw	$s4, 4($s2)	# Store the data value.
	
	addNode:
	# Are we done?
	# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
	# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)

	# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	#Print input text

	li 	$v0, 4
	la 	$a0, msg1
	syscall
	#Read input

	li 	$v0,5
	syscall

	move	$s4, $v0

	sw	$s4, 4($s2)	# Store the data value.

	j	addNode

	allDone:
	# Make sure that the link field of the last node cotains 0.
	# The last node is pointed by $s2.

	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).

	# Restore the register values

	lw	$ra, 0($sp)
	lw	$s0, 4($sp)
	lw	$s1, 8($sp)
	lw	$s2, 12($sp)
	lw	$s3, 16($sp)
	lw	$s4, 20($sp)
	lw	$s5, 24($sp)
	lw	$s6, 28($sp)
	lw	$s7, 32($sp)
	addi	$sp, $sp, 36
	jr	$ra

#=========================================================



printLinkedList:					

# Save $s registers used
	addi	$sp, $sp, -36
	sw	$s7, 32($sp)
	sw	$s6, 28($sp)
	sw	$s5, 24($sp)
	sw	$s4, 20($sp)
	sw	$s3, 16($sp)
	sw	$s2, 12($sp)
	sw	$s1, 8($sp)
	sw	$s0, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...						

	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll	# $s0: Address of current node
	lw	$s1, 0($s0)		# $s1: Address of  next node
	lw	$s2, 4($s0)		# $s2: Data of current node
	addi	$s3, $s3, 1

# $s0: address of current node: print in hex.

# $s1: address of next node: print in hex.

# $s2: data field value of current node: print in decimal.

	

	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
	
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	
# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s0, 4($sp)
	lw	$s1, 8($sp)
	lw	$s2, 12($sp)
	lw	$s3, 16($sp)
	lw	$s4, 20($sp)
	lw	$s5, 24($sp)
	lw	$s6, 28($sp)
	lw	$s7, 32($sp)
	addi	$sp, $sp, 36
	jr	$ra	
	
		
			
				
#=========================================================------------------------------					

printReverse:
	# $a0: points to the linked list.
	# $s0: Address of current
	# s1: Address of next
	# $2: Data of current
	# $s3: Node counter: 1, 2, ...						
	move $s0, $a0		# $s0: points to the current node.
	lw   $s1, size		# $s4: size
	li   $s3, 0
	
	
	
	lw	$s2, 4($s0)	# $s2: Data of current node
	
	print:					
	addi	$sp, $sp, -8
	sw	$s2, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	recursive:
		add	$s0,$s0,8
		lw	$s2, 4($s0)		# $s2: Data of current node
		addi	$s3, $s3, 1
		
		beq	$s3, $s1, printDone	#check
		jal print

printNextData:

	
	
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.

	
	
printDone:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s2, 4($sp)
	addi	$sp, $sp, 8
	
	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
	
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	
# Now consider next node.
	
	jr	$ra	
							

.data
line:	
	.asciiz "\n --------------------------------------"

dataValueOfCurrentNode:
	.asciiz	"\n Data Value: "
msg1: .asciiz "\nEnter a number:"
msg2: .asciiz "\nEnter size "
msg3: .asciiz "\n"
msg4: .asciiz " "
msg5: .asciiz "\nReversed order:"
array1: .word 0
array2: .word 0
size:	.word 0